openapi: 3.0.0
info:
  description: |
    This is the API Documentation of the MOOST Recommender Platform. The API defines methods to interact with the Recommender
    Platform. To perform any action against the API the consumer needs to first call the /auth/login endpoint with valid
    Credentials to retrieve a JWT Token which has to be handed to each call as Bearer Token.
  version: "1.0.0"
  title: MOOST Recommender System
  termsOfService: 'https://www.moost.io/terms/agb'
  contact:
    email: info@moost.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

servers:
  - url: 'https://api.dev.moost.io/'

security:
  - bearerAuth: []

paths:
  /events:
    get:
      tags:
        - Events
      summary: Get all events of the customerId which is stored within the JWT.
      operationId: getEvents
      responses:
        '200':
          description: The list of Events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfEvents'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '5XX':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Events
      summary: Push a new Event
      operationId: addEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Created - Event received
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '5XX':
          $ref: '#/components/responses/InternalServerError'

  /notifications:
    get:
      tags:
        - Notifications
      summary: Get all notifications of the given customerId.
      operationId: getNotifications
      responses:
        '200':
          description: The list of notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfNotificaitons'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '5XX':
          $ref: '#/components/responses/InternalServerError'

  /notifications/{notificationId}/interactions:
    post:
      tags:
        - Notifications
      summary: Push new interaciton with a notification to the Platform.
      security:
        - bearerAuth: []
      operationId: addInteraction
      parameters:
        - name: notificationId
          in: path
          description: 'The ID of the notification with which the end-user has interacted'
          required: true
          schema:
            type: string
            example: 'eec0425c-2697-4fa2-b143-5e942378a06f'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationInteraction'
      responses:
        '200':
          description: Interaction Added to the Platform
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '5XX':
          $ref: '#/components/responses/InternalServerError'

  /devices:
    get:
      tags:
        - Devices
      summary: Gets all devices to all users of ther customerId which stored within the JWT
      responses:
        '200':
          description: The list of devices of the given User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfDevicesPerUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '5XX':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Devices
      summary: Adds or Updates the given Device to the User and Customer that is given
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Device added to the platform
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '5XX':
          $ref: '#/components/responses/InternalServerError'

  /devices/{userId}:
    get:
      tags:
        - Devices
      summary: Gets all devices to the given userId
      parameters:
        - name: userId
          in: path
          description: 'The ID of the user for whom we want to receive the devices'
          required: true
          schema:
            type: string
            example: 'eec0425c-2697-4fa2-b143-5e942378a06f'
      responses:
        '200':
          description: The list of devices of the given User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfDevices'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '5XX':
          $ref: '#/components/responses/InternalServerError'

  /context/geocode:
    get:
      tags:
        - Context
      summary: Converts the given ZIP and CountryCode to lat and long coordinates which can be used for services which need these information.
      security:
        - bearerAuth: []
      operationId: getGeocode
      parameters:
        - in: query
          name: zip
          schema:
            type: string
          description: The ZIP with CountryCode, seperated by comma, which should be converted to lat and long coordinates
          example: '9000,CH'
      responses:
        '200':
          description: The GeoCoordinates of the given zip and country
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoCoordinate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '5XX':
          $ref: '#/components/responses/InternalServerError'

  /context/weather/current:
    get:
      tags:
        - Context
      summary: Gets the current weather forecast for the given GeoCoordinates
      security:
        - bearerAuth: []
      operationId: getCurrentWeatherForecast
      parameters:
        - in: query
          name: lat
          schema:
            type: string
          description: The latitude of the town for which we want to receive the current weather forecast
          example: 47.4236
        - in: query
          name: lon
          schema:
            type: string
          description: The longitude of the town for which we want to receive the current weather forecast
          example: 9.3622
      responses:
        '200':
          description: The Weatherforecast information
        '400':
          $ref: '#/components/responses/BadRequest'
        '5XX':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate the given user and return a new Java Web Token (JWT)
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: OK
          headers:
            Authorization:
              schema:
                type: string
              description: The newly created JWT which can be used to authenticate against other ressources.
        '400':
          $ref: '#/components/responses/BadRequest'
        '5XX':
          $ref: '#/components/responses/InternalServerError'

  /:
    get:
      tags:
        - Gateway
      security: []
      summary: Status Route which returns a status code 200 if the gateway is up and running.
      operationId: getStatus
      responses:
        '200':
          description: Gateway is up and running

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: Unauthorized - Authorization information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP401Unauthorized'
    InternalServerError:
      description: Internal Server Error - something happened
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP500Error'
    BadRequest:
      description: Bad Request - The Request was malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP400BadRequest'

  schemas:
    Credentials:
      type: object
      description: 'Login credentials to obtain a JWT'
      properties:
        username:
          type: string
          description: 'The username you have received from MOOST.'
          example: moost
        password:
          type: string
          format: password
          description: 'The password for the user you have provided in the username field.'
          example: T234asd$iqeöü
    Event:
      type: object
      description: 'An event that is sent to the recommender platform'
      properties:
        timestamp:
          type: integer
          format: int64
          description: 'Timestamp when the event is triggered'
          example: 1589636439
        customerId:
          type: string
          description: 'Unique identifier which is handed to each new customer'
          example: 'e75ff537-fee4-4153-bc5d-be4bc5726dd8'
        user:
          $ref: '#/components/schemas/User'
        device:
          $ref: '#/components/schemas/Device'
        state:
          $ref: '#/components/schemas/State'
        raw:
          type: object
          description: 'The raw event that happened in the customers system'
      required:
        - timestamp
        - customerId
        - type
        - user
        - device
        - state
    State:
      type: object
      description: ''
      properties:
        type:
          type: string
          example: 'BRIGHTNESS'
          enum:
            - 'BRIGHTNESS'
            - 'SIGNAL_STRENGTH'
            - 'LOW_BATTERY'
            - 'BATTERY_LEVEL'
            - 'POWER'
            - 'COLOR'
            - 'COLOR_TEMPERATURE'
            - 'LOCATION'
            - 'MOTION'
            - 'MUTE'
            - 'MEDIA_CONTROL'
            - 'MEDIA_TITLE'
            - 'OUTDOOR_TEMPERATURE'
            - 'WIND_DIRECTION'
            - 'WIND_SPEED'
            - 'TEMPERATURE'
            - 'ATMOSPHERIC_HUMIDITY'
            - 'BAROMETRIC_PRESSURE'
            - 'OTHER'
        value_after:
          type: string
#          enum:
#            - 'PRESSED'
#            - 'LONG_PRESSED'
#            - 'DOUBLE_PRESSED'
#            - 'TOUCHED'
#            - 'MAX_TEMPERATURE'
#            - 'MIN_TEMPERATURE'
#            - 'DEFAULT_PLAYLIST'
#            - 'DEFAULT_SOUND_DEVICE'
#            - 'LEAVES_HOME'
#            - 'RETURNS_HOME'
#            - 'WENT_SLEEPING'
#            - 'GET_UP'
#            - 'ON'
#            - 'OFF'
#            - 'STARTED'
#            - 'PAUSED'
#            - 'STOPPED'
#            - 'NONE'
          example: '80'
          description: 'The value after the state has changed'
        value_before:
          type: string
#          enum:
#            - 'PRESSED'
#            - 'LONG_PRESSED'
#            - 'DOUBLE_PRESSED'
#            - 'DOUBLE_PRESSED'
#            - 'DOUBLE_PRESSED'
#            - 'TOUCHED'
#            - 'MAX_TEMPERATURE'
#            - 'MIN_TEMPERATURE'
#            - 'DEFAULT_PLAYLIST'
#            - 'DEFAULT_SOUND_DEVICE'
#            - 'LEAVES_HOME'
#            - 'RETURNS_HOME'
#            - 'WENT_SLEEPING'
#            - 'GET_UP'
#            - 'ON'
#            - 'OFF'
#            - 'STARTED'
#            - 'PAUSED'
#            - 'STOPPED'
          example: '100'
          description: 'The value before the state has changed'
        value_max:
          type: string
          example: '100'
          description: 'The value which indicates what is 100%. Needed when set additional_information to ABSOLUTE.'
        value_min:
          type: string
          example: '0'
          description: 'The value which inidcates what is 0%. Needed when set additional_information to ABSOLUTE.'
        additional_information:
          type: string
          enum:
            - 'FAHRENHEIT'
            - 'CELSIUS'
            - 'PERCENTAGE'
            - 'ABSOLUTE'
          example: ''
      required:
        - type
        - value_after
    Device:
      type: object
      description: ''
      properties:
        id:
          type: string
          example: 'cb16399f-af20-428e-ad2f-69380f9f07a2'
          description: 'Identifier to uniquely identify the physical device'
        location:
          type: string
          enum:
            - 'LIVING_ROOM'
            - 'KITCHEN'
            - 'MASTER_BEDROOM'
            - 'BEDROOM'
            - 'TOILETTE'
            - 'SHOWER'
            - 'BATH'
            - 'OFFICE'
            - 'OTHER'
          example: 'LIVING_ROOM'
          description: 'The Location (Room) where the device is placed'
        type:
          type: string
          enum:
            - 'LOUDSPEAKER'
            - 'LIGHT_BULB'
            - 'PRINTER'
            - 'WASHING_MACHINE'
            - 'THERMOSTAT'
            - 'COMPUTER'
            - 'HEATER'
            - 'SMART_BUTTON'
          example: 'LIGHT_BULB'
          description: 'Which type of device produced the occurred event'
        vendor_name:
          type: string
          example: 'LIFX'
        product_name:
          type: string
          example: 'LIFX Mini White'
        metadata:
          type: object
          description: 'Additional information that could be specific for some customers'
        createdAt:
          type: integer
          format: int64
          description: 'Timestamp when the device was initially added to the customers cloud'
          example: 1608299956
        updatedAt:
          type: integer
          format: int64
          description: 'Timestamp when the device configuration was last changed'
          example: 1608299956
      required:
        - id
        - type
    User:
      type: object
      description: 'The end-user for whom this event is generated'
      properties:
        id:
          type: string
          example: '2c6d3036-4dad-4de3-84fe-fafa1971b16f'
          description: 'Identifier to uniquely identify a end-user'
        zip:
          type: string
          example: '8646'
          description: 'ZIP where this event was generated'
        country_code:
          type: string
          example: 'CH'
          description: 'Code of the current users country'
      required:
        - id
    ArrayOfDevices:
      type: array
      items:
        $ref: '#/components/schemas/Device'
    ArrayOfDevicesPerUser:
      type: array
      items:
        type: array
        items:
          $ref: '#/components/schemas/Device'
    ArrayOfEvents:
      type: array
      items:
        $ref: '#/components/schemas/Event'
    ArrayOfNotificaitons:
      type: array
      items:
        $ref: '#/components/schemas/Notification'
    ArrayOfNotificationActions:
      type: array
      items:
        $ref: '#/components/schemas/NotificationAction'
    Notification:
      type: object
      description: 'The Notification Object which is sent to the cloud endpoint of a customer'
      properties:
        customerId:
          type: string
          description: 'ID of the customer to whom we send the notification'
          example: 'eec0425c-2697-4fa2-b143-5e942378a06f'
        userId:
          type: string
          description: 'ID of the end-user which we received from the customers system'
          example: 'ba503607-d49b-4042-adee-ae14b3559262'
        title:
          type: object
          description: 'Object containing the texts which should be used as title of the notification.'
          properties:
            de:
              type: string
              description: 'The title in german'
              example: 'Vergiss deinen Schirm nicht!'
            en:
              type: string
              description: 'The title in english'
              example: 'Do not forget your umbrella!'
            fr:
              type: string
              description: 'The title in french'
              example: ''
        message:
          type: object
          description: 'Object containing the texts which should be used as message text of the notification.'
          properties:
            de:
              type: string
              description: 'The message in german'
              example: 'Der Wetterbericht besagt es beginnt in einer Stunde zu regnen. Nimm besser deinen Schirm mit!'
            en:
              type: string
              description: 'The message in english'
              example: 'The weather forecast says it will start to rain in an hour. Do not forget your umbrella!'
            fr:
              type: string
              description: 'The message in french'
              example: ''
        actions:
          type: array
          description: 'Object containing the actions which should be presented to the user'
          items:
            $ref: '#/components/schemas/NotificationAction'
        priority:
          type: string
          description: 'The priority with which this notification should be delivered'
          example: 'High'
        createdAt:
          type: integer
          format: int64
          description: 'Timestamp when the notification was initially created by the recommender system.'
          example: 1608299956
    NotificationInteraction:
      type: object
      description: 'An object representing the interaction with the notification'
      properties:
        actionQualifier:
          type: string
          description: 'The action which was performed on the Notificaiton'
          enum:
            - 'DISMISS'
            - 'OPENWEBSITE'
            - 'OPENRULECREATOR'
            - 'OPENAPP'
            - 'STOPDELIVERY'
          example: 'DISMISS'
    NotificationAction:
      type: object
      description: 'An object representing an action that should be presented to the user of a notification'
      properties:
        text:
          type: string
          description: 'Text that should be presented to the user as action'
          example: 'Set me up now'
        actionQualifier:
          type: string
          description: 'The type of action that should be executed when the user presses on the button'
          enum:
            - 'DISMISS'
            - 'OPENWEBSITE'
            - 'OPENRULECREATOR'
            - 'OPENAPP'
            - 'STOPDELIVERY'
          example: 'OPENRULECREATOR'
        additionalInformation:
          type: string
          description: 'For example the URL of the website that should be opened'
          example: 'https://www.moost.io/about'
    GeoCoordinate:
      type: object
      description: 'An object representing the GeoCoordinate to the given ZIP Code'
      properties:
        zip:
          type: string
          description: 'The ZIP which was used to query for GeoCoordinates'
          example: '9000'
        name:
          type: string
          description: 'The name of the town which is represented by the given ZIP'
          example: 'St. GAllen'
        lat:
          type: number
          description: 'The latitude value of the given town'
          example: 47.4236
        lon:
          type: number
          description: 'The longitude value of the given town'
          example: 9.3622
        country:
          type: string
          description: 'The Country Code which was used to query for GeoCoordinates'
    FulfillmentPreferences:
      type: object
      description: 'An object representing the fulfillment preferences for a certain customer'
      properties:
        customerId:
          type: string
          description: 'ID of the customer for which we will set the preferences'
          example: 'eec0425c-2697-4fa2-b143-5e942378a06f'
        type:
          type: string
          enum:
            - 'REST'
          description: 'Defines what kind of fulfillment type the customer requests'
        auth_strategy:
          type: string
          enum:
            - 'BASIC'
            - 'TOKEN'
            - 'BEARER'
        auth_token:
          type: string
          example: 'eec0425c-2697-4fa2-b143-5e942378a06f'
        auth_token_header:
          type: string
          example: 'X-API-TOKEN'
        auth_user:
          type: string
          example: 'testuser'
        auth_password:
          type: string
          example: 'testpassword'
        rest_hostname:
          type: string
          example: 'api.moost.io'
        rest_path:
          type: string
          example: '/recommendations/v1'
      required:
        - customerId
        - type
        - auth_strategy
        - token
    HTTP400BadRequest:
      type: object
      properties:
        code:
          type: string
          example: '400'
          description: 'HTTP Error Code that occurred'
        message:
          type: string
          example: 'Bad Request - the request was malformed.'
          description: 'HTTP Error Message in a human readable way'
      required:
        - code
        - message
    HTTP401Unauthorized:
      type: object
      properties:
        code:
          type: string
          example: '401'
          description: 'HTTP Error Code that occurred'
        message:
          type: string
          example: 'Unauthorized - please provide a valid API token.'
          description: 'HTTP Error Message in a human readable way'
      required:
        - code
        - message
    HTTP500Error:
      type: object
      properties:
        code:
          type: string
          example: '500'
          description: 'HTTP Error Code that occurred'
        message:
          type: string
          example: 'Internal Server Error'
          description: 'HTTP Error Message in a human readable way'
      required:
        - code
        - message
