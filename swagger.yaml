openapi: 3.0.1
info:
  title: MOOST Recommender Platform API
  description: >
    This comprehensive guide will walk you through the various endpoints and
    functionalities of our powerful recommendation system.

    This documentation provides detailed information about each endpoint,
    including the request parameters, response formats, and 

    example requests and responses. We've also included helpful descriptions and
    explanations to ensure you can make the most of 

    our recommendation system and harness its full potential.


    Let's get started and explore the capabilities of the MOOST Recommender
    Platform API!
  contact:
    email: support@moost.io
  version: 2.5.0
servers:
  - url: https://api.moost.io
security:
  - bearerAuth: []
paths:
  /events/v1:
    post:
      security:
        - bearerAuth: []
      tags:
        - Events
      operationId: addEventV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /events/v2:
    get:
      tags:
        - Events
      operationId: getEventsByCustomerIdV2
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            type: string
            default: ''
        - name: startTimestamp
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: endTimestamp
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 15
        - name: sortDirection
          in: query
          required: false
          schema:
            type: string
            default: asc
        - name: sortProperties
          in: query
          required: false
          schema:
            type: string
            default: timestamp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /events/{customerBuildingId}/v1:
    get:
      tags:
        - Events
      operationId: getEventsForCustomerBuilding
      parameters:
        - name: customerBuildingId
          in: path
          required: true
          schema:
            type: string
        - name: source
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: type
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: from
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /events/types/v1:
    get:
      tags:
        - Events
      operationId: getEventTypesV1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /events/sources/v1:
    get:
      tags:
        - Events
      operationId: getEventSourcesV1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /buildings/v1:
    get:
      tags:
        - Buildings
      operationId: getBuildings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
    post:
      tags:
        - Buildings
      operationId: createOrUpdateBuilding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /buildings/{buildingId}/v1:
    get:
      tags:
        - Buildings
      operationId: getBuilding
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
    delete:
      tags:
        - Buildings
      operationId: deleteBuilding
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'

  /buildings/{buildingId}/rules/v1:
    get:
      tags:
        - Buildings
      operationId: getBuildingRules
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BuildingRule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/Notfound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /buildings/{buildingId}/rules/{ruleId}/v1:
    put:
      tags:
        - Buildings
      operationId: setBuildingRuleState
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /buildings/{customerBuildingId}/devices/v1:
    get:
      tags:
        - Buildings
      operationId: getDevices
      parameters:
        - name: customerBuildingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Buildings
      operationId: addDevices
      parameters:
        - name: customerBuildingId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Device'
        required: true
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /pushnotifications/v1:
    get:
      tags:
        - Notifications
      operationId: getPushNotificationsByCustomerIDV1
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            type: string
            default: ''
        - name: startTimestamp
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
        - name: endTimestamp
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 15
        - name: sortDirection
          in: query
          required: false
          schema:
            type: string
            default: asc
        - name: sortProperties
          in: query
          required: false
          schema:
            type: string
            default: createdAtTimeMillis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushNotificationsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /pushnotifications/v2:
    get:
      tags:
        - Notifications
      operationId: getPushNotifications
      parameters:
        - name: buildingId
          in: query
          required: false
          schema:
            type: string
        - name: ruleId
          in: query
          required: false
          schema:
            type: string
        - name: startTimestamp
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: endTimestamp
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PushNotification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /pushnotifications/buildings/{customerBuildingId}/v1:
    get:
      tags:
        - push-notification-controller
      operationId: getPushNotificationsByCustomerBuildingId
      parameters:
        - name: customerId
          in: header
          required: true
          schema:
            type: string
        - name: customerBuildingId
          in: path
          required: true
          schema:
            type: string
        - name: deliveryStatus
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PushNotification'
  /pushnotifications/{pushNotificationId}/interactions/v1:
    post:
      tags:
        - Notifications
      operationId: postPushNotificationInteraction
      parameters:
        - name: pushNotificationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushNotificationInteraction'
        required: true
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /rules:
    get:
      tags:
        - Rules
      operationId: getAllRulesV1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Rules
      operationId: addRuleV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /rules/{ruleId}:
    get:
      tags:
        - Rules
      operationId: getRuleByIdV1
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Rules
      operationId: updateRuleV1
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /rules/simulation:
    post:
      tags:
        - Rules
      operationId: getNotificationsFromSimulation
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: customerBuildingId
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PushNotification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        5XX:
          $ref: '#/components/responses/InternalServerError'
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate the given user and return a new Java Web Token (JWT)
      operationId: login
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: OK
          headers:
            Authorization:
              schema:
                type: string
              description: The newly created JWT which can be used to authenticate against other ressources.
        '400':
          $ref: '#/components/responses/BadRequest'
        '5XX':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    Event:
      type: object
      properties:
        timestamp:
          type: integer
          format: int64
          example: 1643151600
        customerId:
          type: string
          example: "656730be2bc9719e6e5ed51d"
        customerBuildingId:
          type: string
          example: "000000009C54AEDC"
        deviceId:
          type: string
          example: "64dfc677d499779fae0e1911"
        deviceName:
          type: string
          example: "Device Link Car"
        value:
          type: number
          format: float
          example: 1345.4
        type:
          type: string
          example: POWER_GENERATION
        source:
          type: string
          example: "GATEWAY"
        forecastTimestamp:
          type: integer
          format: int64
    Device:
      type: object
      properties:
        id:
          type: string
        location:
          type: string
          enum:
            - LIVING_ROOM
            - KITCHEN
            - BEDROOM
            - MASTER_BEDROOM
            - TOILETTE
            - SHOWER
            - BATH
            - OFFICE
            - OTHER
        type:
          type: string
        vendor_name:
          type: string
        product_name:
          type: string
        metadata:
          type: string
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
    Building:
      type: object
      properties:
        eventCount:
          type: integer
          format: int64
        id:
          $ref: '#/components/schemas/ObjectId'
        customerBuildingId:
          type: string
        customerId:
          type: string
        zip:
          type: string
        city:
          type: string
        countryCode:
          type: string
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
        settings:
          $ref: '#/components/schemas/Settings'
        geolocation:
          $ref: '#/components/schemas/Geolocation'
    Geolocation:
      type: object
      properties:
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
    Settings:
      type: object
      properties:
        lowTariffHourSetting:
          $ref: '#/components/schemas/LowTariffHourSetting'
    EventResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        totalEvents:
          type: integer
          format: int32
    Dataset:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - SINGLEVALUE
            - TIMESERIES
        source_types:
          type: array
          items:
            type: string
        event_types:
          type: array
          items:
            type: string
        timeframe:
          type: integer
          format: int64
    MessageQueueSetting:
      type: object
      properties:
        isOverflowProtectionActive:
          type: boolean
    Notification:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/Translatable'
        title:
          $ref: '#/components/schemas/Translatable'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/NotificationAction'
    NotificationAction:
      type: object
      properties:
        text:
          $ref: '#/components/schemas/Translatable'
        actionQualifier:
          type: string
          enum:
            - DISMISS
            - OPENRULECREATOR
            - OPENDEVICECONTROL
            - OPENAPP
            - STOPDELIVERY
            - OPENWEB
    ObjectId:
      type: object
      properties:
        timestamp:
          type: integer
          format: int32
        date:
          type: string
          format: date-time
    BuildingRule:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        state:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
    Rule:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        createdAt:
          type: integer
          format: int64
        customerId:
          type: string
        name:
          type: string
        description:
          type: string
        ruleState:
          type: string
          enum:
            - ACTIVE
            - PAUSE
            - DELETE
            - CONTROL
        notification:
          $ref: '#/components/schemas/Notification'
        match_threshold:
          type: integer
          format: int32
        time_between_triggers_seconds:
          type: integer
          format: int64
        resetStateWhenMatched:
          type: boolean
        condition:
          type: string
        messageQueueSetting:
          $ref: '#/components/schemas/MessageQueueSetting'
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/Dataset'
    Translatable:
      type: object
      properties:
        de:
          type: string
        en:
          type: string
        fr:
          type: string
    PushNotification:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        customerId:
          type: string
        userId:
          type: string
        ruleId:
          type: string
        priority:
          type: string
        createdAtTimeMillis:
          type: integer
          format: int64
        interaction:
          $ref: '#/components/schemas/PushNotificationInteraction'
        ingestionTimestamp:
          type: integer
          format: int64
        message:
          $ref: '#/components/schemas/Translatable'
        title:
          $ref: '#/components/schemas/Translatable'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/NotificationAction'
        delivery_status:
          $ref: '#/components/schemas/PushNotificationDeliveryStatus'
    PushNotificationsResponse:
      type: object
      properties:
        pushNotifications:
          type: array
          items:
            $ref: '#/components/schemas/PushNotification'
        totalPushNotifications:
          type: integer
          format: int32
    PushNotificationDeliveryStatus:
      type: object
      properties:
        status:
          type: string
          enum:
            - DELIVERED
            - DROPPED
        reason:
          type: string
    PushNotificationInteraction:
      type: object
      properties:
        actionQualifier:
          type: string
    Credentials:
      type: object
      description: 'Login credentials to obtain a JWT'
      properties:
        username:
          type: string
          description: 'The username you have received from MOOST.'
          example: moost
        password:
          type: string
          format: password
          description: 'The password for the user you have provided in the username field.'
          example: T234asd$iqeöü
    LowTariffHourSetting:
      type: object
      properties:
        mondayStartTime:
          type: string
        mondayEndTime:
          type: string
        tuesdayStartTime:
          type: string
        tuesdayEndTime:
          type: string
        wednesdayStartTime:
          type: string
        wednesdayEndTime:
          type: string
        thursdayStartTime:
          type: string
        thursdayEndTime:
          type: string
        fridayStartTime:
          type: string
        fridayEndTime:
          type: string
        saturdayStartTime:
          type: string
        saturdayEndTime:
          type: string
        sundayStartTime:
          type: string
        sundayEndTime:
          type: string
    HTTP400BadRequest:
      type: object
      properties:
        code:
          type: string
          example: '400'
          description: HTTP Error Code that occurred
        message:
          type: string
          example: Bad Request - the request was malformed.
          description: HTTP Error Message in a human readable way
      required:
        - code
        - message
    HTTP401Unauthorized:
      type: object
      properties:
        code:
          type: string
          example: '401'
          description: HTTP Error Code that occurred
        message:
          type: string
          example: Unauthorized - please provide a valid API token.
          description: HTTP Error Message in a human readable way
      required:
        - code
        - message
    HTTP404Notfound:
      type: object
      properties:
        code:
          type: string
          example: '404'
          description: HTTP Error Code that occurred
        message:
          type: string
          example: The given resource was not found
          description: HTTP Error Message in a human readable way
      required:
        - code
        - message
    HTTP500Error:
      type: object
      properties:
        code:
          type: string
          example: '500'
          description: HTTP Error Code that occurred
        message:
          type: string
          example: Internal Server Error
          description: HTTP Error Message in a human readable way
      required:
        - code
        - message
        - null
  responses:
    Unauthorized:
      description: Unauthorized - Authorization information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP401Unauthorized'
    Notfound:
      description: The given resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP404Notfound'
    InternalServerError:
      description: Internal Server Error - something happened
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP500Error'
    BadRequest:
      description: Bad Request - The Request was malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTP400BadRequest'
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT